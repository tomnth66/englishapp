{values.stage === "setUserName" && (
        <div>
          <DialogContent style={{ background: "#f3f5f8" }}>
            <form className={classes.container}>
              <FormControl className={classes.formControl} required>
                <TextField
                  // error={values.isError}
                  variant="outlined"
                  label="User Name"
                  onChange={handleChange("userName")}
                />
              </FormControl>
              <FormControl className={classes.formControl} variant="outlined">
                <InputLabel
                  error={values.isError}
                  htmlFor="outlined-adornment-password"
                >
                  Password
                </InputLabel>
                <OutlinedInput
                  error={values.isError}
                  id="outlined-adornment-password"
                  type={values.showPassword ? "text" : "password"}
                  value={values.password}
                  onChange={handleChange("password")}
                  endAdornment={
                    <InputAdornment position="end">
                      <IconButton
                        aria-label="toggle password visibility"
                        onClick={handleClickShowPassword("showPassword")}
                        onMouseDown={handleMouseDownPassword}
                        edge="end"
                      >
                        {values.showPassword ? (
                          <Visibility />
                        ) : (
                          <VisibilityOff />
                        )}
                      </IconButton>
                    </InputAdornment>
                  }
                  labelWidth={70}
                />
              </FormControl>
              <FormControl
                className={classes.formControl}
                variant="outlined"
                style={{ marginBottom: "0" }}
              >
                <InputLabel
                  error={values.isError}
                  htmlFor="outlined-adornment-password"
                  style={{ background: "#f3f5f8" }}
                >
                  Re-type Password
                </InputLabel>
                <OutlinedInput
                  error={values.isError}
                  id="outlined-adornment-password"
                  type={values.showReTypePass ? "text" : "password"}
                  value={values.reTypePass}
                  onChange={handleChange("reTypePass")}
                  endAdornment={
                    <InputAdornment position="end">
                      <IconButton
                        aria-label="toggle password visibility"
                        onClick={handleClickShowPassword("showReTypePass")}
                        onMouseDown={handleMouseDownPassword}
                        edge="end"
                      >
                        {values.showReTypePass ? (
                          <Visibility />
                        ) : (
                          <VisibilityOff />
                        )}
                      </IconButton>
                    </InputAdornment>
                  }
                  labelWidth={70}
                />
                {/* <FormHelperText error={values.isError}>{values.errorMesseage}</FormHelperText> */}
              </FormControl>
            </form>
          </DialogContent>
          <div
            style={{
              display: "flex",
              width: "100%",
              height: "4em",
              alignItems: "center",
              justifyContent: "center",
              background: "#f3f5f8"
            }}
          >
            <div
              style={{
                display: "flex",
                width: "400px",
                justifyContent: "flex-end"
              }}
            >
              <Button onClick={handleClose} color="primary">
                Cancel
              </Button>
              <Button
                onClick={next}
                color="primary"
                variant="contained"
                disabled={
                  !values.userName || !values.password || !values.reTypePass
                }
              >
                Next
              </Button>
            </div>
          </div>
        </div>
      )}
      {values.stage === "setCourse" && (
        <div>
          <DialogContent style={{ background: "#f3f5f8" }}>
            <form className={classes.container}>
              <FormControl className={classes.formControl} required>
                <TextField
                  // error={values.isError}
                  variant="outlined"
                  label="Full Name"
                  onChange={handleChange("studentName")}
                />
              </FormControl>
              <FormControl className={classes.formControl} required>
                <TextField
                  // error={values.isError}
                  variant="outlined"
                  label="Course"
                  onChange={handleChange("course")}
                />
              </FormControl>
              <FormControl className={classes.formControl} required>
                <TextField
                  // error={values.isError}
                  variant="outlined"
                  label="Email"
                  onChange={handleChange("email")}
                />
              </FormControl>
            </form>
          </DialogContent>
          <div
            style={{
              display: "flex",
              width: "100%",
              height: "4em",
              alignItems: "center",
              justifyContent: "center",
              background: "#f3f5f8"
            }}
          >
            <div
              style={{
                display: "flex",
                width: "400px",
                justifyContent: "flex-end"
              }}
            >
              <Button
                onClick={() => {
                  setValues({ ...values, stage: "setUserName" });
                  console.log(values);
                }}
                color="primary"
              >
                Back
              </Button>
              <Button
                onClick={register}
                color="primary"
                variant="contained"
                disabled={
                  !values.studentName || !values.course || !values.email
                }
              >
                Register
              </Button>
            </div>
          </div>
        </div>
      )}